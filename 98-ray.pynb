{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3497647e",
   "metadata": {},
   "source": [
    "# Parallel computation with Ray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "d8631bbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: numpy in /usr/lib64/python3.13/site-packages (1.26.4)\n",
      "Requirement already satisfied: polars in /home/jan/.local/lib/python3.13/site-packages (1.23.0)\n",
      "Collecting ray[default]\n",
      "  Downloading ray-2.47.1-cp313-cp313-manylinux2014_x86_64.whl.metadata (20 kB)\n",
      "Requirement already satisfied: click>=7.0 in /usr/lib/python3.13/site-packages (from ray[default]) (8.1.7)\n",
      "Requirement already satisfied: filelock in /usr/lib/python3.13/site-packages (from ray[default]) (3.15.4)\n",
      "Requirement already satisfied: jsonschema in /usr/lib/python3.13/site-packages (from ray[default]) (4.19.1)\n",
      "Requirement already satisfied: msgpack<2.0.0,>=1.0.0 in /usr/lib64/python3.13/site-packages (from ray[default]) (1.0.6)\n",
      "Requirement already satisfied: packaging in /usr/lib/python3.13/site-packages (from ray[default]) (24.2)\n",
      "Requirement already satisfied: protobuf!=3.19.5,>=3.15.3 in /usr/lib64/python3.13/site-packages (from ray[default]) (3.19.6)\n",
      "Requirement already satisfied: pyyaml in /usr/lib64/python3.13/site-packages (from ray[default]) (6.0.1)\n",
      "Requirement already satisfied: requests in /usr/lib/python3.13/site-packages (from ray[default]) (2.32.3)\n",
      "Requirement already satisfied: aiohttp>=3.7 in /usr/lib64/python3.13/site-packages (from ray[default]) (3.10.5)\n",
      "Collecting aiohttp_cors (from ray[default])\n",
      "  Downloading aiohttp_cors-0.8.1-py3-none-any.whl.metadata (20 kB)\n",
      "Collecting colorful (from ray[default])\n",
      "  Downloading colorful-0.5.7-py2.py3-none-any.whl.metadata (16 kB)\n",
      "Collecting py-spy>=0.4.0 (from ray[default])\n",
      "  Downloading py_spy-0.4.0-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl.metadata (16 kB)\n",
      "Requirement already satisfied: grpcio>=1.42.0 in /usr/lib64/python3.13/site-packages (from ray[default]) (1.48.4)\n",
      "Collecting opencensus (from ray[default])\n",
      "  Downloading opencensus-0.11.4-py2.py3-none-any.whl.metadata (12 kB)\n",
      "Collecting opentelemetry-sdk (from ray[default])\n",
      "  Downloading opentelemetry_sdk-1.34.1-py3-none-any.whl.metadata (1.6 kB)\n",
      "Collecting opentelemetry-exporter-prometheus (from ray[default])\n",
      "  Downloading opentelemetry_exporter_prometheus-0.55b1-py3-none-any.whl.metadata (1.9 kB)\n",
      "Collecting opentelemetry-proto (from ray[default])\n",
      "  Downloading opentelemetry_proto-1.34.1-py3-none-any.whl.metadata (2.4 kB)\n",
      "Collecting pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3 (from ray[default])\n",
      "  Downloading pydantic-2.11.7-py3-none-any.whl.metadata (67 kB)\n",
      "Collecting prometheus_client>=0.7.1 (from ray[default])\n",
      "  Downloading prometheus_client-0.22.1-py3-none-any.whl.metadata (1.9 kB)\n",
      "Collecting smart_open (from ray[default])\n",
      "  Downloading smart_open-7.3.0.post1-py3-none-any.whl.metadata (24 kB)\n",
      "Collecting virtualenv!=20.21.1,>=20.0.24 (from ray[default])\n",
      "  Downloading virtualenv-20.31.2-py3-none-any.whl.metadata (4.5 kB)\n",
      "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/lib/python3.13/site-packages (from aiohttp>=3.7->ray[default]) (2.4.4)\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /usr/lib/python3.13/site-packages (from aiohttp>=3.7->ray[default]) (1.3.2)\n",
      "Requirement already satisfied: attrs>=17.3.0 in /usr/lib/python3.13/site-packages (from aiohttp>=3.7->ray[default]) (24.2.0)\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /usr/lib64/python3.13/site-packages (from aiohttp>=3.7->ray[default]) (1.5.0)\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/lib64/python3.13/site-packages (from aiohttp>=3.7->ray[default]) (6.0.5)\n",
      "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/lib64/python3.13/site-packages (from aiohttp>=3.7->ray[default]) (1.9.4)\n",
      "Requirement already satisfied: six>=1.5.2 in /usr/lib/python3.13/site-packages (from grpcio>=1.42.0->ray[default]) (1.16.0)\n",
      "Collecting annotated-types>=0.6.0 (from pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3->ray[default])\n",
      "  Downloading annotated_types-0.7.0-py3-none-any.whl.metadata (15 kB)\n",
      "Collecting pydantic-core==2.33.2 (from pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3->ray[default])\n",
      "  Downloading pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)\n",
      "Requirement already satisfied: typing-extensions>=4.12.2 in /usr/lib/python3.13/site-packages (from pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3->ray[default]) (4.12.2)\n",
      "Collecting typing-inspection>=0.4.0 (from pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3->ray[default])\n",
      "  Downloading typing_inspection-0.4.1-py3-none-any.whl.metadata (2.6 kB)\n",
      "Requirement already satisfied: distlib<1,>=0.3.7 in /usr/lib/python3.13/site-packages (from virtualenv!=20.21.1,>=20.0.24->ray[default]) (0.3.8)\n",
      "Requirement already satisfied: platformdirs<5,>=3.9.1 in /usr/lib/python3.13/site-packages (from virtualenv!=20.21.1,>=20.0.24->ray[default]) (4.2.2)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/lib/python3.13/site-packages (from jsonschema->ray[default]) (2023.11.2)\n",
      "Requirement already satisfied: referencing>=0.28.4 in /usr/lib/python3.13/site-packages (from jsonschema->ray[default]) (0.36.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in /usr/lib64/python3.13/site-packages (from jsonschema->ray[default]) (0.19.1)\n",
      "Collecting opencensus-context>=0.1.3 (from opencensus->ray[default])\n",
      "  Downloading opencensus_context-0.1.3-py2.py3-none-any.whl.metadata (3.3 kB)\n",
      "Requirement already satisfied: google-api-core<3.0.0,>=1.0.0 in /usr/lib/python3.13/site-packages (from opencensus->ray[default]) (2.11.1)\n",
      "Collecting opentelemetry-api~=1.12 (from opentelemetry-exporter-prometheus->ray[default])\n",
      "  Downloading opentelemetry_api-1.34.1-py3-none-any.whl.metadata (1.5 kB)\n",
      "Collecting opentelemetry-semantic-conventions==0.55b1 (from opentelemetry-sdk->ray[default])\n",
      "  Downloading opentelemetry_semantic_conventions-0.55b1-py3-none-any.whl.metadata (2.5 kB)\n",
      "Collecting importlib-metadata<8.8.0,>=6.0 (from opentelemetry-api~=1.12->opentelemetry-exporter-prometheus->ray[default])\n",
      "  Downloading importlib_metadata-8.7.0-py3-none-any.whl.metadata (4.8 kB)\n",
      "Collecting protobuf!=3.19.5,>=3.15.3 (from ray[default])\n",
      "  Downloading protobuf-5.29.5-cp38-abi3-manylinux2014_x86_64.whl.metadata (592 bytes)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/lib/python3.13/site-packages (from requests->ray[default]) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/lib/python3.13/site-packages (from requests->ray[default]) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/lib/python3.13/site-packages (from requests->ray[default]) (1.26.20)\n",
      "Collecting wrapt (from smart_open->ray[default])\n",
      "  Downloading wrapt-1.17.2-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.4 kB)\n",
      "Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/lib/python3.13/site-packages (from google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (1.63.0)\n",
      "Requirement already satisfied: google-auth<3.0.dev0,>=2.14.1 in /usr/lib/python3.13/site-packages (from google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (2.38.0)\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/lib/python3.13/site-packages (from google-auth<3.0.dev0,>=2.14.1->google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (5.4.0)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/lib/python3.13/site-packages (from google-auth<3.0.dev0,>=2.14.1->google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (0.4.0)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/lib/python3.13/site-packages (from google-auth<3.0.dev0,>=2.14.1->google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (4.9)\n",
      "Collecting zipp>=3.20 (from importlib-metadata<8.8.0,>=6.0->opentelemetry-api~=1.12->opentelemetry-exporter-prometheus->ray[default])\n",
      "  Downloading zipp-3.23.0-py3-none-any.whl.metadata (3.6 kB)\n",
      "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/lib/python3.13/site-packages (from pyasn1-modules>=0.2.1->google-auth<3.0.dev0,>=2.14.1->google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (0.6.0)\n",
      "Downloading prometheus_client-0.22.1-py3-none-any.whl (58 kB)\n",
      "Downloading py_spy-0.4.0-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl (2.7 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.7/2.7 MB\u001b[0m \u001b[31m8.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n",
      "\u001b[?25hDownloading pydantic-2.11.7-py3-none-any.whl (444 kB)\n",
      "Downloading pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m10.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading virtualenv-20.31.2-py3-none-any.whl (6.1 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.1/6.1 MB\u001b[0m \u001b[31m11.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n",
      "\u001b[?25hDownloading aiohttp_cors-0.8.1-py3-none-any.whl (25 kB)\n",
      "Downloading colorful-0.5.7-py2.py3-none-any.whl (201 kB)\n",
      "Downloading opencensus-0.11.4-py2.py3-none-any.whl (128 kB)\n",
      "Downloading opentelemetry_exporter_prometheus-0.55b1-py3-none-any.whl (12 kB)\n",
      "Downloading opentelemetry_sdk-1.34.1-py3-none-any.whl (118 kB)\n",
      "Downloading opentelemetry_api-1.34.1-py3-none-any.whl (65 kB)\n",
      "Downloading opentelemetry_semantic_conventions-0.55b1-py3-none-any.whl (196 kB)\n",
      "Downloading opentelemetry_proto-1.34.1-py3-none-any.whl (55 kB)\n",
      "Downloading protobuf-5.29.5-cp38-abi3-manylinux2014_x86_64.whl (319 kB)\n",
      "Downloading ray-2.47.1-cp313-cp313-manylinux2014_x86_64.whl (68.8 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m68.8/68.8 MB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading smart_open-7.3.0.post1-py3-none-any.whl (61 kB)\n",
      "Downloading annotated_types-0.7.0-py3-none-any.whl (13 kB)\n",
      "Downloading opencensus_context-0.1.3-py2.py3-none-any.whl (5.1 kB)\n",
      "Downloading typing_inspection-0.4.1-py3-none-any.whl (14 kB)\n",
      "Downloading wrapt-1.17.2-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (89 kB)\n",
      "Downloading importlib_metadata-8.7.0-py3-none-any.whl (27 kB)\n",
      "Downloading zipp-3.23.0-py3-none-any.whl (10 kB)\n",
      "Installing collected packages: py-spy, opencensus-context, colorful, zipp, wrapt, virtualenv, typing-inspection, pydantic-core, protobuf, prometheus_client, annotated-types, smart_open, pydantic, opentelemetry-proto, importlib-metadata, opentelemetry-api, aiohttp_cors, ray, opentelemetry-semantic-conventions, opencensus, opentelemetry-sdk, opentelemetry-exporter-prometheus\n",
      "Successfully installed aiohttp_cors-0.8.1 annotated-types-0.7.0 colorful-0.5.7 importlib-metadata-8.7.0 opencensus-0.11.4 opencensus-context-0.1.3 opentelemetry-api-1.34.1 opentelemetry-exporter-prometheus-0.55b1 opentelemetry-proto-1.34.1 opentelemetry-sdk-1.34.1 opentelemetry-semantic-conventions-0.55b1 prometheus_client-0.22.1 protobuf-5.29.5 py-spy-0.4.0 pydantic-2.11.7 pydantic-core-2.33.2 ray-2.47.1 smart_open-7.3.0.post1 typing-inspection-0.4.1 virtualenv-20.31.2 wrapt-1.17.2 zipp-3.23.0\n",
      "Cloning into 'europython-25'...\n",
      "fatal: unable to access 'https://github.com/coobas/europython-25.git/': Could not resolve host: github.com\n",
      "mv: cannot stat 'europython/*.parquet': No such file or directory\n"
     ]
    }
   ],
   "source": [
    "# Run this in Google Collab, perhaps not elsewhere\n",
    "!pip install numpy ray[default] polars\n",
    "!git clone https://github.com/coobas/europython-25.git\n",
    "!mkdir local_data\n",
    "!mv europython/*.parquet local_data/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1b8faadc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import polars as pl\n",
    "import ray\n",
    "\n",
    "from pathlib import Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c08c34ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Constants\n",
    "N_POINTS = 10   # Number of points in each dimension for the grid\n",
    "LIMIT = 10.0    # +/- Span of the grid\n",
    "DEFAULT_K = 4   # How many nearest neighbors to consider"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "378c24e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_distances(query_points: np.ndarray, reference_points: np.ndarray) -> np.ndarray:\n",
    "    \"\"\"\n",
    "    Calculate mutual distances between M query and N reference points.\n",
    "\n",
    "    Returns:\n",
    "    --------\n",
    "    distances: np.ndarray\n",
    "        (N, M) array of the distances\n",
    "    \"\"\"\n",
    "    # Expand for broadcasting\n",
    "    query_points = query_points[:, :, np.newaxis]\n",
    "    reference_points = reference_points[:3, np.newaxis]\n",
    "    return np.sqrt(np.sum((reference_points - query_points) ** 2, axis=0))\n",
    "\n",
    "\n",
    "def knn_search(\n",
    "    query_points: np.ndarray,\n",
    "    reference_points: np.ndarray,\n",
    "    k: int,\n",
    "    distances_func=calculate_distances,\n",
    "):\n",
    "    \"\"\"\n",
    "    Find k nearest neighbour reference point indices for N query points.\n",
    "\n",
    "    Returns:\n",
    "    --------\n",
    "    indices: np.ndarray\n",
    "        (N, k) matrix of integral indices\n",
    "\n",
    "    \"\"\"\n",
    "    distances = distances_func(query_points, reference_points).T\n",
    "    nearest_indices = np.argpartition(distances, k, axis=0)[:k].T\n",
    "    return nearest_indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ca859ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_point_grid(n_points: int = N_POINTS) -> tuple[np.ndarray, ...]:\n",
    "    \"\"\"\n",
    "    Create a homogenous grid of points to create a map.\n",
    "\n",
    "    Returns:\n",
    "    --------\n",
    "    x: np.ndarray\n",
    "        Flattened (N_POINTS x N_POINTS,) array of x values\n",
    "    y: np.ndarray\n",
    "        Flattened (N_POINTS x N_POINTS,) array of x values\n",
    "    \"\"\"\n",
    "    # TODO: Add floor\n",
    "    x = np.linspace(-LIMIT, LIMIT, n_points)\n",
    "    y = np.linspace(-LIMIT, LIMIT, n_points)\n",
    "    return tuple(arr.flatten() for arr in np.meshgrid(x, y))\n",
    "\n",
    "\n",
    "def create_query_points(n_points: int = N_POINTS, floor: int = 1) -> np.ndarray:\n",
    "    \"\"\"\n",
    "    Create a homogenous grid of points with a floor to create a map.\n",
    "\n",
    "    Returns:\n",
    "    --------\n",
    "    query_points: np.ndarray\n",
    "        (n_points x n_points, 3) array of query points\n",
    "    \"\"\"\n",
    "    x, y = create_point_grid(n_points=n_points)\n",
    "    return np.vstack([x, y, np.ones(x.shape[0]) * floor])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "58b91cd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_prices(query_points: np.ndarray, reference_points: np.ndarray) -> np.ndarray:\n",
    "    \"\"\"\n",
    "    Find prices for N data_points.\n",
    "\n",
    "    Returns:\n",
    "    --------\n",
    "    prices: np.ndarray\n",
    "        (N,) array of prices\n",
    "    \"\"\"\n",
    "    indices = knn_search(query_points, reference_points, DEFAULT_K)\n",
    "    prices: np.ndarray = reference_points[3][indices]\n",
    "    return prices.mean(axis=1)\n",
    "\n",
    "\n",
    "def combine_points_and_prices(\n",
    "    query_points: np.ndarray, prices: np.ndarray\n",
    ") -> pl.DataFrame:\n",
    "    \"\"\"\n",
    "    Prepare human-friendly output from numpy arrays.\n",
    "\n",
    "    Returns:\n",
    "    --------\n",
    "    df: pl.DataFrame\n",
    "        DataFrame with columns x, y, floor, price\n",
    "    \"\"\"\n",
    "    return pl.DataFrame(\n",
    "        {\n",
    "            \"x\": query_points[0],\n",
    "            \"y\": query_points[1],\n",
    "            \"floor\": query_points[2],\n",
    "            \"price\": prices,\n",
    "        }\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "20a7774f",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "No such file or directory (os error 2): local_data/data.parquet\n\nThis error occurred with the following context stack:\n\t[1] 'parquet scan'\n\t[2] 'sink'\n",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mFileNotFoundError\u001b[39m                         Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[42]\u001b[39m\u001b[32m, line 21\u001b[39m\n\u001b[32m     11\u001b[39m     df = pl.read_parquet(path)\n\u001b[32m     12\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m np.vstack(\n\u001b[32m     13\u001b[39m         [\n\u001b[32m     14\u001b[39m             df[\u001b[33m\"\u001b[39m\u001b[33mx\u001b[39m\u001b[33m\"\u001b[39m].to_numpy(),\n\u001b[32m   (...)\u001b[39m\u001b[32m     18\u001b[39m         ]\n\u001b[32m     19\u001b[39m     )\n\u001b[32m---> \u001b[39m\u001b[32m21\u001b[39m \u001b[43mload_reference_points\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[42]\u001b[39m\u001b[32m, line 11\u001b[39m, in \u001b[36mload_reference_points\u001b[39m\u001b[34m(path)\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mload_reference_points\u001b[39m(path: Path = Path(\u001b[33m\"\u001b[39m\u001b[33mlocal_data/data.parquet\u001b[39m\u001b[33m\"\u001b[39m)) -> np.ndarray:\n\u001b[32m      2\u001b[39m \u001b[38;5;250m    \u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m      3\u001b[39m \u001b[33;03m    Load reference data points from a Parquet file.\u001b[39;00m\n\u001b[32m      4\u001b[39m \n\u001b[32m   (...)\u001b[39m\u001b[32m      8\u001b[39m \u001b[33;03m        (N, 4) array of data points with x, y, floor, and price columns\u001b[39;00m\n\u001b[32m      9\u001b[39m \u001b[33;03m    \"\"\"\u001b[39;00m\n\u001b[32m---> \u001b[39m\u001b[32m11\u001b[39m     df = \u001b[43mpl\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread_parquet\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     12\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m np.vstack(\n\u001b[32m     13\u001b[39m         [\n\u001b[32m     14\u001b[39m             df[\u001b[33m\"\u001b[39m\u001b[33mx\u001b[39m\u001b[33m\"\u001b[39m].to_numpy(),\n\u001b[32m   (...)\u001b[39m\u001b[32m     18\u001b[39m         ]\n\u001b[32m     19\u001b[39m     )\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/code/collaboration/europython-25/.venv/lib/python3.12/site-packages/polars/_utils/deprecation.py:128\u001b[39m, in \u001b[36mdeprecate_renamed_parameter.<locals>.decorate.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m    123\u001b[39m \u001b[38;5;129m@wraps\u001b[39m(function)\n\u001b[32m    124\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mwrapper\u001b[39m(*args: P.args, **kwargs: P.kwargs) -> T:\n\u001b[32m    125\u001b[39m     _rename_keyword_argument(\n\u001b[32m    126\u001b[39m         old_name, new_name, kwargs, function.\u001b[34m__qualname__\u001b[39m, version\n\u001b[32m    127\u001b[39m     )\n\u001b[32m--> \u001b[39m\u001b[32m128\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/code/collaboration/europython-25/.venv/lib/python3.12/site-packages/polars/_utils/deprecation.py:128\u001b[39m, in \u001b[36mdeprecate_renamed_parameter.<locals>.decorate.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m    123\u001b[39m \u001b[38;5;129m@wraps\u001b[39m(function)\n\u001b[32m    124\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mwrapper\u001b[39m(*args: P.args, **kwargs: P.kwargs) -> T:\n\u001b[32m    125\u001b[39m     _rename_keyword_argument(\n\u001b[32m    126\u001b[39m         old_name, new_name, kwargs, function.\u001b[34m__qualname__\u001b[39m, version\n\u001b[32m    127\u001b[39m     )\n\u001b[32m--> \u001b[39m\u001b[32m128\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/code/collaboration/europython-25/.venv/lib/python3.12/site-packages/polars/io/parquet/functions.py:283\u001b[39m, in \u001b[36mread_parquet\u001b[39m\u001b[34m(source, columns, n_rows, row_index_name, row_index_offset, parallel, use_statistics, hive_partitioning, glob, schema, hive_schema, try_parse_hive_dates, rechunk, low_memory, storage_options, credential_provider, retries, use_pyarrow, pyarrow_options, memory_map, include_file_paths, missing_columns, allow_missing_columns)\u001b[39m\n\u001b[32m    280\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    281\u001b[39m         lf = lf.select(columns)\n\u001b[32m--> \u001b[39m\u001b[32m283\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mlf\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcollect\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/code/collaboration/europython-25/.venv/lib/python3.12/site-packages/polars/_utils/deprecation.py:97\u001b[39m, in \u001b[36mdeprecate_streaming_parameter.<locals>.decorate.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m     93\u001b[39m         kwargs[\u001b[33m\"\u001b[39m\u001b[33mengine\u001b[39m\u001b[33m\"\u001b[39m] = \u001b[33m\"\u001b[39m\u001b[33min-memory\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m     95\u001b[39m     \u001b[38;5;28;01mdel\u001b[39;00m kwargs[\u001b[33m\"\u001b[39m\u001b[33mstreaming\u001b[39m\u001b[33m\"\u001b[39m]\n\u001b[32m---> \u001b[39m\u001b[32m97\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/code/collaboration/europython-25/.venv/lib/python3.12/site-packages/polars/lazyframe/opt_flags.py:330\u001b[39m, in \u001b[36mforward_old_opt_flags.<locals>.decorate.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m    327\u001b[39m         optflags = cb(optflags, kwargs.pop(key))  \u001b[38;5;66;03m# type: ignore[no-untyped-call,unused-ignore]\u001b[39;00m\n\u001b[32m    329\u001b[39m kwargs[\u001b[33m\"\u001b[39m\u001b[33moptimizations\u001b[39m\u001b[33m\"\u001b[39m] = optflags\n\u001b[32m--> \u001b[39m\u001b[32m330\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/code/collaboration/europython-25/.venv/lib/python3.12/site-packages/polars/lazyframe/frame.py:2332\u001b[39m, in \u001b[36mLazyFrame.collect\u001b[39m\u001b[34m(self, type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, cluster_with_columns, collapse_joins, no_optimization, engine, background, optimizations, **_kwargs)\u001b[39m\n\u001b[32m   2330\u001b[39m \u001b[38;5;66;03m# Only for testing purposes\u001b[39;00m\n\u001b[32m   2331\u001b[39m callback = _kwargs.get(\u001b[33m\"\u001b[39m\u001b[33mpost_opt_callback\u001b[39m\u001b[33m\"\u001b[39m, callback)\n\u001b[32m-> \u001b[39m\u001b[32m2332\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m wrap_df(\u001b[43mldf\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcollect\u001b[49m\u001b[43m(\u001b[49m\u001b[43mengine\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcallback\u001b[49m\u001b[43m)\u001b[49m)\n",
      "\u001b[31mFileNotFoundError\u001b[39m: No such file or directory (os error 2): local_data/data.parquet\n\nThis error occurred with the following context stack:\n\t[1] 'parquet scan'\n\t[2] 'sink'\n"
     ]
    }
   ],
   "source": [
    "def load_reference_points(path: Path = Path(\"local_data/data.parquet\")) -> np.ndarray:\n",
    "    \"\"\"\n",
    "    Load reference data points from a Parquet file.\n",
    "\n",
    "    Returns:\n",
    "    --------\n",
    "    data_points: np.ndarray\n",
    "        (N, 4) array of data points with x, y, floor, and price columns\n",
    "    \"\"\"\n",
    "\n",
    "    df = pl.read_parquet(path)\n",
    "    return np.vstack(\n",
    "        [\n",
    "            df[\"x\"].to_numpy(),\n",
    "            df[\"y\"].to_numpy(),\n",
    "            df[\"floor\"].to_numpy(),\n",
    "            df[\"price\"].to_numpy(),\n",
    "        ]\n",
    "    )\n",
    "\n",
    "load_reference_points()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20bc510c",
   "metadata": {},
   "source": [
    "## Run without ray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2c811011",
   "metadata": {},
   "outputs": [],
   "source": [
    "reference_points = load_reference_points()\n",
    "query_points = create_query_points(n_points=21)  # 21x21 grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ddcecfae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 502.62571959,  500.13594855,  495.10341566,  502.52833846,\n",
       "        502.5467052 ,  500.02744492,  504.94078685,  499.85745752,\n",
       "        494.98465024,  500.03661855,  505.01821533,  505.00684279,\n",
       "        502.47588716,  499.98768467,  499.99211118,  500.04099002,\n",
       "        497.59564911,  500.06374184,  500.02201434,  502.51915041,\n",
       "        502.54348979,  497.54320775,  500.03138938,  500.06767674,\n",
       "        500.06656139,  500.0288302 ,  502.55029677,  502.43691303,\n",
       "        497.52504565,  497.6332057 ,  500.23417158,  502.56966152,\n",
       "        499.97439812,  497.53875769,  499.98768467,  497.49516044,\n",
       "        500.04099002,  502.49065489,  499.97016386,  500.01859561,\n",
       "        505.04226032,  507.56657851,  499.89594421,  499.93068565,\n",
       "        497.58921302,  502.5168136 ,  497.59173098,  500.07097926,\n",
       "        500.116691  ,  502.51270672,  500.12762656,  500.19419819,\n",
       "        499.98613251,  499.99593661,  497.47259949,  499.98299894,\n",
       "        500.0724613 ,  502.61919445,  497.54871551,  497.53857535,\n",
       "        499.98577522,  502.55007522,  500.05308205,  499.94156622,\n",
       "        499.97689656,  502.5443147 ,  502.46480269,  497.49396838,\n",
       "        500.03694901,  500.14794132,  502.56935095,  502.46731769,\n",
       "        552.82766562,  598.68694018,  591.01393202,  577.42399393,\n",
       "        500.0827117 ,  500.04615437,  500.00837903,  500.13375325,\n",
       "        492.57409591,  497.58049503,  500.02106723,  502.55001147,\n",
       "        502.5569022 ,  500.03587857,  492.5236285 ,  500.04163262,\n",
       "        497.52613491,  499.93545846,  502.49997211,  514.11604289,\n",
       "        586.78739501,  784.88896859,  809.04144042,  835.84925365,\n",
       "        749.09795388,  593.10154763,  518.60358417,  500.84158785,\n",
       "        502.55170665,  502.42318347,  497.4946655 ,  500.06525598,\n",
       "        504.99917614,  495.09202285,  497.62287761,  492.58669425,\n",
       "        502.55469068,  502.47016107,  499.95408297,  524.23350875,\n",
       "        602.98410949,  801.52239933,  921.34978858, 1099.94876668,\n",
       "       1090.49506615, 1203.261782  , 1026.1698135 ,  708.77136046,\n",
       "        551.99297849,  507.59502984,  497.50732546,  499.94960905,\n",
       "        500.01883152,  500.01361168,  497.61334341,  495.194789  ,\n",
       "        500.01909428,  497.46283975,  499.95297675,  499.96514698,\n",
       "        524.22438896,  680.80774435,  807.82044647, 1388.98097122,\n",
       "       1442.8511577 , 1549.87634687, 1482.72785566, 1083.01359037,\n",
       "        941.51058618,  742.82039361,  565.58353133,  502.47290833,\n",
       "        499.88314926,  497.38763404,  502.50231262,  500.16050914,\n",
       "        502.58270509,  499.9225237 ,  499.97162359,  499.95769727,\n",
       "        499.91896386,  612.68426756,  823.45270089, 1060.28027988,\n",
       "       1398.31039891, 1569.22944973, 1675.58620057, 1586.75677097,\n",
       "       1428.28629989, 1096.60721529,  682.02232527,  534.76281833,\n",
       "        499.94664269,  500.05869616,  497.5502946 ,  507.42159044,\n",
       "        492.75631534,  497.64159044,  500.02343116,  500.02838291,\n",
       "        499.97984678,  514.510156  ,  662.55901683,  807.36104088,\n",
       "       1094.92303521, 1503.49428909, 1666.60763203, 1769.34186417,\n",
       "       1637.9123406 , 1525.36971615, 1135.15501909,  819.60102183,\n",
       "        508.09348917,  505.96559069,  502.46097326,  505.13115136,\n",
       "        492.55979908,  497.6841445 ,  502.52728588,  500.10679191,\n",
       "        502.51888197,  500.09591693,  499.9303889 ,  690.41356699,\n",
       "        863.30632403, 1306.86204543, 1584.43332806, 1774.85009961,\n",
       "       1715.3985825 , 1662.13198947, 1478.51581741, 1065.83543977,\n",
       "        948.59727987,  541.92825432,  513.79338193,  497.62571861,\n",
       "        500.02457713,  500.00397259,  499.9947853 ,  500.02063775,\n",
       "        497.48672525,  500.1215198 ,  500.08211208,  499.91854264,\n",
       "        527.32146584, 1198.85178347, 1479.32928219, 1764.98617259,\n",
       "       2004.94187513, 1762.21836575, 1547.75786191, 1334.96199423,\n",
       "       1221.43875922,  777.17692896,  623.53485373,  539.78518026,\n",
       "        500.15105232,  500.09609495,  499.99960569,  497.52612769,\n",
       "        502.4393906 ,  500.01295833,  500.00202404,  500.05191506,\n",
       "        499.99022329,  520.95547552, 1027.98120114, 1276.43870631,\n",
       "       1653.03660035, 1677.35689253, 1749.92861511, 1475.93648601,\n",
       "       1435.62280608, 1204.37872403, 1034.31472554,  688.79540446,\n",
       "        568.34247473,  500.03096537,  495.13437056,  495.0922878 ,\n",
       "        505.03990197,  502.51364299,  500.10610511,  499.95416143,\n",
       "        502.38892883,  502.48503477,  541.5936681 ,  703.08676606,\n",
       "       1190.21937005, 1253.77371717, 1385.73050355, 1467.04263984,\n",
       "       1398.97538817, 1319.24110169, 1110.08015027,  983.84454276,\n",
       "        584.41732989,  499.97050354,  499.88091108,  502.38111539,\n",
       "        509.88750523,  502.56460144,  499.92564924,  500.05177328,\n",
       "        497.65435302,  500.03272342,  500.13569346,  518.06944173,\n",
       "        665.35782537, 1116.85092874, 1212.26711139, 1196.26184363,\n",
       "       1284.80329362, 1242.34314761, 1224.60541101, 1043.78186549,\n",
       "        797.59580337,  595.57835608,  499.9705893 ,  499.87999612,\n",
       "        499.90328569,  499.86639254,  497.53410951,  499.94678964,\n",
       "        500.02067799,  500.06146987,  500.09620859,  495.05859957,\n",
       "        504.99004984,  629.09946659,  842.58951916, 1055.06103388,\n",
       "        945.68047013,  932.20894793,  883.67538016,  952.25445782,\n",
       "        691.62024253,  614.70291773,  513.97075139,  499.88138803,\n",
       "        499.90702135,  497.42746801,  504.81065147,  499.99283174,\n",
       "        500.00129731,  500.033898  ,  500.01559915,  502.52492624,\n",
       "        497.68848685,  500.10429578,  558.30551971,  630.0990537 ,\n",
       "        627.53672297,  584.1101067 ,  733.78779975,  691.97984824,\n",
       "        673.57656481,  599.66214592,  558.52818969,  499.99830186,\n",
       "        499.8736118 ,  499.87920246,  499.91567676,  499.93305831,\n",
       "        495.06108919,  500.05369686,  497.59395552,  502.53483704,\n",
       "        495.09375496,  500.08582531,  500.08091894,  500.17284183,\n",
       "        514.50751768,  514.36064787,  499.89802222,  528.18995294,\n",
       "        505.04067196,  529.74885591,  500.0215175 ,  499.96174001,\n",
       "        500.03498322,  499.94307245,  499.89713497,  499.87390625,\n",
       "        497.45805237,  500.07592534,  500.00645993,  500.0348823 ,\n",
       "        502.5642631 ,  499.99620324,  500.031799  ,  500.1316098 ,\n",
       "        502.63590988,  502.59811056,  499.95458408,  499.89826   ,\n",
       "        500.00325304,  500.06556227,  500.12769073,  500.1230827 ,\n",
       "        500.08140955,  500.11814312,  500.09555374,  499.99231069,\n",
       "        499.90106226,  497.54230682,  497.41347611,  499.92023634,\n",
       "        499.90733214,  502.56410408,  500.11971576,  500.00190046,\n",
       "        497.6538411 ,  502.4809472 ,  499.9791291 ,  499.91758768,\n",
       "        500.05757231,  500.02994227,  497.53477147,  495.07714403,\n",
       "        500.05278143,  505.00682351,  500.00477568,  500.00477568,\n",
       "        499.81859339,  497.45186424,  497.49300762,  497.62465912,\n",
       "        502.40565927,  500.02050726,  500.10395376,  500.08240933,\n",
       "        499.9453753 ,  499.99199228,  499.97926334,  499.89338064,\n",
       "        499.87093465,  497.48213673,  502.54654479,  497.62112016,\n",
       "        504.95886021,  500.09142728,  504.96638042,  502.42056052,\n",
       "        499.89001642,  499.98231651,  500.03267354,  499.91166844,\n",
       "        497.64758741,  500.00054391,  499.95961209,  500.12582737,\n",
       "        502.60261371,  497.50457342,  504.8391476 ,  500.0492238 ,\n",
       "        504.96914029,  502.36002285,  499.98461487,  505.09617165,\n",
       "        505.14112472,  502.60440718,  504.92513383,  502.53533383,\n",
       "        500.02784047,  502.49857032,  500.12108401,  500.03810721,\n",
       "        497.50167414])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices = compute_prices(query_points, reference_points)\n",
    "prices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8720f27f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 122 μs, sys: 8 μs, total: 130 μs\n",
      "Wall time: 134 μs\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (441, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>y</th><th>floor</th><th>price</th></tr><tr><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>-10.0</td><td>-10.0</td><td>1.0</td><td>502.62572</td></tr><tr><td>-9.0</td><td>-10.0</td><td>1.0</td><td>500.135949</td></tr><tr><td>-8.0</td><td>-10.0</td><td>1.0</td><td>495.103416</td></tr><tr><td>-7.0</td><td>-10.0</td><td>1.0</td><td>502.528338</td></tr><tr><td>-6.0</td><td>-10.0</td><td>1.0</td><td>502.546705</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>6.0</td><td>10.0</td><td>1.0</td><td>500.02784</td></tr><tr><td>7.0</td><td>10.0</td><td>1.0</td><td>502.49857</td></tr><tr><td>8.0</td><td>10.0</td><td>1.0</td><td>500.121084</td></tr><tr><td>9.0</td><td>10.0</td><td>1.0</td><td>500.038107</td></tr><tr><td>10.0</td><td>10.0</td><td>1.0</td><td>497.501674</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (441, 4)\n",
       "┌───────┬───────┬───────┬────────────┐\n",
       "│ x     ┆ y     ┆ floor ┆ price      │\n",
       "│ ---   ┆ ---   ┆ ---   ┆ ---        │\n",
       "│ f64   ┆ f64   ┆ f64   ┆ f64        │\n",
       "╞═══════╪═══════╪═══════╪════════════╡\n",
       "│ -10.0 ┆ -10.0 ┆ 1.0   ┆ 502.62572  │\n",
       "│ -9.0  ┆ -10.0 ┆ 1.0   ┆ 500.135949 │\n",
       "│ -8.0  ┆ -10.0 ┆ 1.0   ┆ 495.103416 │\n",
       "│ -7.0  ┆ -10.0 ┆ 1.0   ┆ 502.528338 │\n",
       "│ -6.0  ┆ -10.0 ┆ 1.0   ┆ 502.546705 │\n",
       "│ …     ┆ …     ┆ …     ┆ …          │\n",
       "│ 6.0   ┆ 10.0  ┆ 1.0   ┆ 500.02784  │\n",
       "│ 7.0   ┆ 10.0  ┆ 1.0   ┆ 502.49857  │\n",
       "│ 8.0   ┆ 10.0  ┆ 1.0   ┆ 500.121084 │\n",
       "│ 9.0   ┆ 10.0  ┆ 1.0   ┆ 500.038107 │\n",
       "│ 10.0  ┆ 10.0  ┆ 1.0   ┆ 497.501674 │\n",
       "└───────┴───────┴───────┴────────────┘"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "points_and_prices = combine_points_and_prices(query_points=query_points, prices=prices)\n",
    "points_and_prices"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b8fe0b2",
   "metadata": {},
   "source": [
    "## Run compute_prices in ray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7cfeece6",
   "metadata": {},
   "outputs": [],
   "source": [
    "@ray.remote\n",
    "def compute_prices(query_points: np.ndarray, reference_points: np.ndarray) -> np.ndarray:\n",
    "    \"\"\"\n",
    "    Find prices for N data_points.\n",
    "\n",
    "    Returns:\n",
    "    --------\n",
    "    prices: np.ndarray\n",
    "        (N,) array of prices\n",
    "    \"\"\"\n",
    "    indices = knn_search(query_points, reference_points, DEFAULT_K)\n",
    "    prices: np.ndarray = reference_points[3][indices]\n",
    "    return prices.mean(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "64ad7271",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-11 13:14:36,083\tINFO worker.py:1694 -- Connecting to existing Ray cluster at address: 192.168.1.23:6379...\n",
      "2025-07-11 13:14:36,084\tINFO worker.py:1718 -- Calling ray.init() again after it has already been called.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "ObjectRef(4482c0d3e15a41a8ffffffffffffffffffffffff0500000001000000)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reference_points = load_reference_points()\n",
    "query_points = create_query_points(n_points=21)  \n",
    "\n",
    "ray.init(ignore_reinit_error=True)\n",
    "\n",
    "prices = compute_prices.remote(query_points, reference_points)\n",
    "prices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "790e553d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 502.62571959,  500.13594855,  495.10341566,  502.52833846,\n",
       "        502.5467052 ,  500.02744492,  504.94078685,  499.85745752,\n",
       "        494.98465024,  500.03661855,  505.01821533,  505.00684279,\n",
       "        502.47588716,  499.98768467,  499.99211118,  500.04099002,\n",
       "        497.59564911,  500.06374184,  500.02201434,  502.51915041,\n",
       "        502.54348979,  497.54320775,  500.03138938,  500.06767674,\n",
       "        500.06656139,  500.0288302 ,  502.55029677,  502.43691303,\n",
       "        497.52504565,  497.6332057 ,  500.23417158,  502.56966152,\n",
       "        499.97439812,  497.53875769,  499.98768467,  497.49516044,\n",
       "        500.04099002,  502.49065489,  499.97016386,  500.01859561,\n",
       "        505.04226032,  507.56657851,  499.89594421,  499.93068565,\n",
       "        497.58921302,  502.5168136 ,  497.59173098,  500.07097926,\n",
       "        500.116691  ,  502.51270672,  500.12762656,  500.19419819,\n",
       "        499.98613251,  499.99593661,  497.47259949,  499.98299894,\n",
       "        500.0724613 ,  502.61919445,  497.54871551,  497.53857535,\n",
       "        499.98577522,  502.55007522,  500.05308205,  499.94156622,\n",
       "        499.97689656,  502.5443147 ,  502.46480269,  497.49396838,\n",
       "        500.03694901,  500.14794132,  502.56935095,  502.46731769,\n",
       "        552.82766562,  598.68694018,  591.01393202,  577.42399393,\n",
       "        500.0827117 ,  500.04615437,  500.00837903,  500.13375325,\n",
       "        492.57409591,  497.58049503,  500.02106723,  502.55001147,\n",
       "        502.5569022 ,  500.03587857,  492.5236285 ,  500.04163262,\n",
       "        497.52613491,  499.93545846,  502.49997211,  514.11604289,\n",
       "        586.78739501,  784.88896859,  809.04144042,  835.84925365,\n",
       "        749.09795388,  593.10154763,  518.60358417,  500.84158785,\n",
       "        502.55170665,  502.42318347,  497.4946655 ,  500.06525598,\n",
       "        504.99917614,  495.09202285,  497.62287761,  492.58669425,\n",
       "        502.55469068,  502.47016107,  499.95408297,  524.23350875,\n",
       "        602.98410949,  801.52239933,  921.34978858, 1099.94876668,\n",
       "       1090.49506615, 1203.261782  , 1026.1698135 ,  708.77136046,\n",
       "        551.99297849,  507.59502984,  497.50732546,  499.94960905,\n",
       "        500.01883152,  500.01361168,  497.61334341,  495.194789  ,\n",
       "        500.01909428,  497.46283975,  499.95297675,  499.96514698,\n",
       "        524.22438896,  680.80774435,  807.82044647, 1388.98097122,\n",
       "       1442.8511577 , 1549.87634687, 1482.72785566, 1083.01359037,\n",
       "        941.51058618,  742.82039361,  565.58353133,  502.47290833,\n",
       "        499.88314926,  497.38763404,  502.50231262,  500.16050914,\n",
       "        502.58270509,  499.9225237 ,  499.97162359,  499.95769727,\n",
       "        499.91896386,  612.68426756,  823.45270089, 1060.28027988,\n",
       "       1398.31039891, 1569.22944973, 1675.58620057, 1586.75677097,\n",
       "       1428.28629989, 1096.60721529,  682.02232527,  534.76281833,\n",
       "        499.94664269,  500.05869616,  497.5502946 ,  507.42159044,\n",
       "        492.75631534,  497.64159044,  500.02343116,  500.02838291,\n",
       "        499.97984678,  514.510156  ,  662.55901683,  807.36104088,\n",
       "       1094.92303521, 1503.49428909, 1666.60763203, 1769.34186417,\n",
       "       1637.9123406 , 1525.36971615, 1135.15501909,  819.60102183,\n",
       "        508.09348917,  505.96559069,  502.46097326,  505.13115136,\n",
       "        492.55979908,  497.6841445 ,  502.52728588,  500.10679191,\n",
       "        502.51888197,  500.09591693,  499.9303889 ,  690.41356699,\n",
       "        863.30632403, 1306.86204543, 1584.43332806, 1774.85009961,\n",
       "       1715.3985825 , 1662.13198947, 1478.51581741, 1065.83543977,\n",
       "        948.59727987,  541.92825432,  513.79338193,  497.62571861,\n",
       "        500.02457713,  500.00397259,  499.9947853 ,  500.02063775,\n",
       "        497.48672525,  500.1215198 ,  500.08211208,  499.91854264,\n",
       "        527.32146584, 1198.85178347, 1479.32928219, 1764.98617259,\n",
       "       2004.94187513, 1762.21836575, 1547.75786191, 1334.96199423,\n",
       "       1221.43875922,  777.17692896,  623.53485373,  539.78518026,\n",
       "        500.15105232,  500.09609495,  499.99960569,  497.52612769,\n",
       "        502.4393906 ,  500.01295833,  500.00202404,  500.05191506,\n",
       "        499.99022329,  520.95547552, 1027.98120114, 1276.43870631,\n",
       "       1653.03660035, 1677.35689253, 1749.92861511, 1475.93648601,\n",
       "       1435.62280608, 1204.37872403, 1034.31472554,  688.79540446,\n",
       "        568.34247473,  500.03096537,  495.13437056,  495.0922878 ,\n",
       "        505.03990197,  502.51364299,  500.10610511,  499.95416143,\n",
       "        502.38892883,  502.48503477,  541.5936681 ,  703.08676606,\n",
       "       1190.21937005, 1253.77371717, 1385.73050355, 1467.04263984,\n",
       "       1398.97538817, 1319.24110169, 1110.08015027,  983.84454276,\n",
       "        584.41732989,  499.97050354,  499.88091108,  502.38111539,\n",
       "        509.88750523,  502.56460144,  499.92564924,  500.05177328,\n",
       "        497.65435302,  500.03272342,  500.13569346,  518.06944173,\n",
       "        665.35782537, 1116.85092874, 1212.26711139, 1196.26184363,\n",
       "       1284.80329362, 1242.34314761, 1224.60541101, 1043.78186549,\n",
       "        797.59580337,  595.57835608,  499.9705893 ,  499.87999612,\n",
       "        499.90328569,  499.86639254,  497.53410951,  499.94678964,\n",
       "        500.02067799,  500.06146987,  500.09620859,  495.05859957,\n",
       "        504.99004984,  629.09946659,  842.58951916, 1055.06103388,\n",
       "        945.68047013,  932.20894793,  883.67538016,  952.25445782,\n",
       "        691.62024253,  614.70291773,  513.97075139,  499.88138803,\n",
       "        499.90702135,  497.42746801,  504.81065147,  499.99283174,\n",
       "        500.00129731,  500.033898  ,  500.01559915,  502.52492624,\n",
       "        497.68848685,  500.10429578,  558.30551971,  630.0990537 ,\n",
       "        627.53672297,  584.1101067 ,  733.78779975,  691.97984824,\n",
       "        673.57656481,  599.66214592,  558.52818969,  499.99830186,\n",
       "        499.8736118 ,  499.87920246,  499.91567676,  499.93305831,\n",
       "        495.06108919,  500.05369686,  497.59395552,  502.53483704,\n",
       "        495.09375496,  500.08582531,  500.08091894,  500.17284183,\n",
       "        514.50751768,  514.36064787,  499.89802222,  528.18995294,\n",
       "        505.04067196,  529.74885591,  500.0215175 ,  499.96174001,\n",
       "        500.03498322,  499.94307245,  499.89713497,  499.87390625,\n",
       "        497.45805237,  500.07592534,  500.00645993,  500.0348823 ,\n",
       "        502.5642631 ,  499.99620324,  500.031799  ,  500.1316098 ,\n",
       "        502.63590988,  502.59811056,  499.95458408,  499.89826   ,\n",
       "        500.00325304,  500.06556227,  500.12769073,  500.1230827 ,\n",
       "        500.08140955,  500.11814312,  500.09555374,  499.99231069,\n",
       "        499.90106226,  497.54230682,  497.41347611,  499.92023634,\n",
       "        499.90733214,  502.56410408,  500.11971576,  500.00190046,\n",
       "        497.6538411 ,  502.4809472 ,  499.9791291 ,  499.91758768,\n",
       "        500.05757231,  500.02994227,  497.53477147,  495.07714403,\n",
       "        500.05278143,  505.00682351,  500.00477568,  500.00477568,\n",
       "        499.81859339,  497.45186424,  497.49300762,  497.62465912,\n",
       "        502.40565927,  500.02050726,  500.10395376,  500.08240933,\n",
       "        499.9453753 ,  499.99199228,  499.97926334,  499.89338064,\n",
       "        499.87093465,  497.48213673,  502.54654479,  497.62112016,\n",
       "        504.95886021,  500.09142728,  504.96638042,  502.42056052,\n",
       "        499.89001642,  499.98231651,  500.03267354,  499.91166844,\n",
       "        497.64758741,  500.00054391,  499.95961209,  500.12582737,\n",
       "        502.60261371,  497.50457342,  504.8391476 ,  500.0492238 ,\n",
       "        504.96914029,  502.36002285,  499.98461487,  505.09617165,\n",
       "        505.14112472,  502.60440718,  504.92513383,  502.53533383,\n",
       "        500.02784047,  502.49857032,  500.12108401,  500.03810721,\n",
       "        497.50167414])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ray.get(prices)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f53ff1a7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "accelerating-scientific-python",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
